/*
 * JavaScript / Canvas teaching framwork 
 * (C)opyright Hartmut Schirmacher, hschirmacher.beuth-hochschule.de 
 * changes by Kristian Hildebrand, khildebrand@beuth-hochschule.de
 * additional changes by Martin Puse, mpuse@beuth-hochschule.de
 *
 * Module: point_dragger
 *
 * A PointDragger is a drawable object than can react to 
 * events from a SceneController. It will typically control
 * the position of one vertex/point of a scene obejct.
 */
 
/* requireJS module definition */
define(['util', 'Scene'],
function(util, Scene) {

    'use strict';

    /*
     * A dragger is a visible handle to move a 2D point around
     * using the 2D rendering features of the HTML5 canvas element.
     * Parameters:
     *
     * - getPos [ function() --> [x,y] ]
     *
     *      callback function that will return the position of the dragger
     *      as an array [x,y]
     *
     * - setPos [ function(dragEvent) ]
     *
     *      a callback function that repositions the dragger according to a
     *      drag event generated by SceneController. The drag event is of the form
     *      { position: [x,y], delta: [x,y] }, where pos is the absolute position
     *      of the mouse, and delta is the difference vector pointing from
     *      the last known dragging position to the current mouse position.
     *
     * - style [Â {radius: 5, width: 2, color: '#FF00FF', fill: false} ]
     *
     *      specification object for the drawing style, example see above
     */
    function PointDragger(getPos, setPos, style) {

        // remember the callbacks
        this._getPos = getPos;
        this._setPos = setPos;

        // default draw style for the dragger
        style = style || {};
        this._style = {
            radius : style.radius || 5,
            width  : style.width  || 2,
            color  : style.color  || '#ff0000',
            fill   : style.fill   || false
        };

        // attribute queried by SceneController to recognize draggers
        this.isDragger = true;
    }
    
    var proto = PointDragger.prototype;
    
    /*
     * draw the dragger as a small circle
     */
    proto.draw = function(context) {
        // what is my current position?
        var pos = this._getPos();

        // define the shape to draw
        context.beginPath();
        context.arc(
            pos[0], pos[1],      // position
            this._style.radius,  // radius
            0.0, Math.PI * 2,    // start and end angle
            true                 // clockwise
        );                    
        context.closePath();

        // set draw style for the shape
        context.lineWidth   = this._style.width;
        context.strokeStyle = this._style.color;
        context.fillStyle   = this._style.color;

        // trigger the actual drawing
        if (this._style.fill) {
            context.fill();
        }
        context.stroke();
    };

    /*
     * test whether the specified mouse position 'hits' this dragger
     */
    proto.isHit = function(mousePos) {
        // what is my current position?
        var pos = this._getPos();

        // check whether distance between mouse and dragger's center
        // is less or equal ( radius + (line width)/2 )
        var dx = mousePos[0] - pos[0];
        var dy = mousePos[1] - pos[1];
        var r  = this._style.radius + this._style.width / 2;
        return dx * dx + dy * dy <= r * r;
    };

    /*
     * Event handler triggered by a SceneController when mouse
     * is being dragged
     */
    proto.mouseDrag = function(dragEvent) {
        // change position of the associated original (!) object
        this._setPos(dragEvent);
    };


    // this module exposes only the constructor for Dragger objects
    return PointDragger;
});
